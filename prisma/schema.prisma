// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  passwordHash    String?
  image           String?
  profileComplete Boolean   @default(false)
  created         DateTime  @default(now())
  updated         DateTime  @updatedAt

  accounts Account[]
  member   Member?
}

model Member {
  id      String   @id @default(cuid())
  userId  String   @unique
  name    String
  created DateTime @default(now())
  updated DateTime @updatedAt
  bio     String
  image   String?

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos Photo[]
}

model Photo {
  id       String  @id @default(cuid())
  url      String
  publicId String?
  memberId String

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}
